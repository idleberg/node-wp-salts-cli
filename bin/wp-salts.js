#!/usr/bin/env node
var pkg = require('../package.json');
// Dependencies
var chalk = require('chalk');
var program = require('commander');
var sortKeys = require('sort-keys');
var _a = require('table'), table = _a.table, getBorderCharacters = _a.getBorderCharacters;
var wpSalts = require('wp-salts').wpSalts;
var getLongestString = function (input) {
    var map = input.map(function (x) { return x.length; });
    var max = map.indexOf(Math.max.apply(Math, map));
    return input[max];
};
var lineBreak = function (p) {
    if (p.break && (p.json || p.yaml || p.dotenv || p.php)) {
        console.log();
    }
};
// Action
program
    .description('CLI tool to generate WordPress salts in various formats')
    .version(pkg.version)
    .arguments('[options]')
    .usage('[options]')
    .option('--dotenv', 'output as DotENV')
    .option('--json', 'output as JSON')
    .option('--php', 'output as PHP')
    .option('--yaml', 'output as YAML')
    .option('-b, --break', 'add line-breaks before and after the result')
    .option('-i, --indent <int>', 'indentation level for JSON output', parseInt)
    .option('-l, --length <int>', 'length of the salt (default: 64)', parseInt)
    .option('-s, --sort', 'sort keys alphabetically')
    .option('-u, --ugly', 'don\'t align JSON or PHP output')
    .parse(process.argv);
var indentation;
Object.freeze(program);
if (!isNaN(program.indent)) {
    indentation = program.indent;
}
else if (!program.indent && program.ugly) {
    indentation = 0;
}
else {
    indentation = 2;
}
var saltLength = (program.length) ? program.length : 64;
var salts = (program.args.length) ? wpSalts(program.args, saltLength) : wpSalts('', saltLength);
if (program.sort) {
    salts = sortKeys(salts);
}
Object.freeze(salts);
lineBreak(program);
if (program.json) {
    console.log(JSON.stringify(salts, null, indentation));
}
else if (program.yaml) {
    Object.keys(salts).forEach(function (key) {
        console.log(key.toLowerCase() + ":", "\"" + salts[key] + "\"");
    });
}
else if (program.dotenv) {
    Object.keys(salts).forEach(function (key) {
        console.log(key + "='" + salts[key] + "'");
    });
}
else if (program.php) {
    var maxLength_1 = getLongestString(Object.keys(salts)).length;
    Object.keys(salts).forEach(function (key) {
        var whitespace = (program.ugly) ? '' : ' '.repeat(maxLength_1 - key.length);
        console.log("define('" + key + "', " + whitespace + "'" + salts[key] + "');");
    });
}
else {
    var data_1 = [
        [chalk.bold('Key'), chalk.bold('Salt')]
    ];
    Object.keys(salts).forEach(function (key) {
        data_1.push([key, salts[key]]);
    });
    var output = table(data_1, { border: getBorderCharacters('norc') });
    console.log(output);
}
lineBreak(program);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3Atc2FsdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvd3Atc2FsdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXZDLGVBQWU7QUFDZixJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3JDLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNoQyxJQUFBLHFCQUFpRCxFQUEvQyxnQkFBSyxFQUFFLDRDQUF3QyxDQUFDO0FBQ2hELElBQUEscUNBQU8sQ0FBeUI7QUFFeEMsSUFBTSxnQkFBZ0IsR0FBRyxVQUFBLEtBQUs7SUFDNUIsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLEVBQVIsQ0FBUSxDQUFDLENBQUM7SUFDckMsSUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFSLElBQUksRUFBUSxHQUFHLEVBQUUsQ0FBQztJQUUxQyxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFFRixJQUFNLFNBQVMsR0FBRyxVQUFBLENBQUM7SUFDakIsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RELE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUNmO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsU0FBUztBQUNULE9BQU87S0FDSixXQUFXLENBQUMseURBQXlELENBQUM7S0FDdEUsT0FBTyxD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